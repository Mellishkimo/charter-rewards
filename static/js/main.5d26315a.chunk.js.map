{"version":3,"sources":["components/RewardsCalculator.js","data/SalesRecords.js","utils/index.js","components/SortArrows.js","components/RecordsTable.js","components/HistoryTable.js","App.js","serviceWorker.js","index.js"],"names":["calculateRewards","purchaseTotal","rewardPoints","calculateMonthlyRewards","numberMonth","customerData","monthlyTotals","monthlyArray","forEach","transaction","customerName","customer","date","purchases","rewards","purchaseAmount","Object","values","total","push","calculateTotalRewards","rewardsTotals","rewardsArray","salesRecords","tableSort","customerUp","fn","a","b","customerDown","dateUp","moment","dateDown","purchaseAmountUp","purchaseAmountDown","purchasesUp","purchasesDown","purchaseTotalUp","purchaseTotalDown","rewardUp","rewardDown","rewardsUp","rewardsDown","SortArrows","props","column","currentSort","changeIcon","indexOf","test","style","float","margin","paddingLeft","RecordsTable","sortCustomer","nextSort","state","setState","sortPurchases","sortPurchaseTotal","sortRewards","data","this","Table","onClick","sort","map","row","i","key","React","Component","HistoryTable","sortDate","sortPurchaseAmount","sortReward","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d26315a.chunk.js","sourcesContent":["export const calculateRewards = (purchaseTotal) => {\n    var rewardPoints = 0\n    if (purchaseTotal > 100) {\n        var doubleBonus = (purchaseTotal - 100) * 2\n        rewardPoints = doubleBonus + 50\n    }\n    else if (purchaseTotal > 50) {\n        rewardPoints = purchaseTotal - 50\n    }\n    return rewardPoints\n}\n\nexport const calculateMonthlyRewards = (numberMonth, customerData) => {\n    const monthlyTotals = {}\n    const monthlyArray = []\n    customerData.forEach(transaction => {\n        var customerName = transaction.customer\n        if (transaction.date[0] == numberMonth) {\n            if (!monthlyTotals[customerName]) {\n                monthlyTotals[customerName] = { purchases: 0, purchaseTotal: 0, rewards: 0 }\n            }\n            monthlyTotals[customerName] = {\n                customer: customerName,\n                purchases: monthlyTotals[customerName].purchases + 1,\n                purchaseTotal: monthlyTotals[customerName].purchaseTotal + transaction.purchaseAmount,\n                rewards: monthlyTotals[customerName].rewards + calculateRewards(transaction.purchaseAmount)\n            }\n        }\n    })\n\n    Object.values(monthlyTotals).forEach(total => {\n        monthlyArray.push(total)\n    })\n\n    return monthlyArray\n}\n\nexport const calculateTotalRewards = (customerData) => {\n    const rewardsTotals = {}\n    const rewardsArray = []\n    customerData.forEach(transaction => {\n        var customerName = transaction.customer\n        if (!rewardsTotals[customerName]) {\n                rewardsTotals[customerName] = { purchases: 0, purchaseTotal: 0, rewards: 0 }\n            }\n            rewardsTotals[customerName] = {\n                customer: customerName,\n                purchases: rewardsTotals[customerName].purchases + 1,\n                purchaseTotal: rewardsTotals[customerName].purchaseTotal + transaction.purchaseAmount,\n                rewards: rewardsTotals[customerName].rewards + calculateRewards(transaction.purchaseAmount)\n            }\n    })\n\n    Object.values(rewardsTotals).forEach(total => {\n        rewardsArray.push(total)\n    })\n\n    return rewardsArray\n}","export const salesRecords = [\n    { customer: 'Mellish, J.', date: '7/12/2020', purchaseAmount: 120 },\n    { customer: 'Mellish, J.', date: '6/18/2020', purchaseAmount: 76 },\n    { customer: 'Mellish, J.', date: '8/05/2020', purchaseAmount: 190 },\n    { customer: 'Mellish, J.', date: '7/28/2020', purchaseAmount: 55 },\n    { customer: 'Mellish, J.', date: '7/22/2020', purchaseAmount: 24 },\n    { customer: 'Chaney, L.', date: '7/14/2020', purchaseAmount: 93 },\n    { customer: 'Chaney, L.', date: '7/15/2020', purchaseAmount: 40 },\n    { customer: 'Chaney, L.', date: '8/26/2020', purchaseAmount: 247 },\n    { customer: 'Stamkos, S.', date: '6/23/2020', purchaseAmount: 74 },\n    { customer: 'Karlsson, M.', date: '6/12/2020', purchaseAmount: 45 },\n    { customer: 'Karlsson, M.', date: '6/02/2020', purchaseAmount: 68 },\n    { customer: 'Karlsson, M.', date: '8/21/2020', purchaseAmount: 101 },\n    { customer: 'Dubuc, L.', date: '8/07/2020', purchaseAmount: 308 },\n    { customer: 'Dubuc, L.', date: '6/01/2020', purchaseAmount: 14 },\n    { customer: 'Dubuc, L.', date: '6/28/2020', purchaseAmount: 56 },\n    { customer: 'Civian, K.', date: '8/17/2020', purchaseAmount: 106 },\n    { customer: 'Civian, K.', date: '7/17/2020', purchaseAmount: 10 },\n    { customer: 'Civian, K.', date: '6/17/2020', purchaseAmount: 62 },\n    { customer: 'Salvian, H.', date: '7/19/2020', purchaseAmount: 212 },\n    { customer: 'Salvian, H.', date: '7/07/2020', purchaseAmount: 142 },\n    { customer: 'Dean, D.', date: '6/27/2020', purchaseAmount: 520 },\n    { customer: 'Novak, N.', date: '8/02/2020', purchaseAmount: 90 },\n    { customer: 'Novak, N.', date: '8/22/2020', purchaseAmount: 90 },\n    { customer: 'Fleischmann, B.', date: '8/11/2020', purchaseAmount: 49 },\n]","import moment from 'moment'\nimport { calculateRewards } from '../components/RewardsCalculator'\n\nexport const tableSort = {\n    customerUp: { fn: (a, b) => {\n        if (a.customer < b.customer) { return 1 }\n        else return -1 }\n    },\n    customerDown: { fn: (a, b) => {\n        if (a.customer > b.customer) { return 1 }\n        else return -1 }\n    },\n    dateUp: { fn: (a, b) => moment(a.date) - moment(b.date) },\n    dateDown: { fn: (a, b) => moment(b.date) - moment(a.date) },\n    purchaseAmountUp: { fn: (a, b) => a.purchaseAmount - b.purchaseAmount },\n    purchaseAmountDown: { fn: (a, b) => b.purchaseAmount - a.purchaseAmount },\n    purchasesUp: { fn: (a, b) => a.purchases - b.purchases },\n    purchasesDown: { fn: (a, b) => b.purchases - a.purchases },\n    purchaseTotalUp: { fn: (a, b) => a.purchaseTotal - b.purchaseTotal },\n    purchaseTotalDown: { fn: (a, b) => b.purchaseTotal - a.purchaseTotal },\n    rewardUp: { fn: (a, b) => calculateRewards(a.purchaseAmount) - calculateRewards(b.purchaseAmount) },\n    rewardDown: { fn: (a, b) => calculateRewards(b.purchaseAmount) - calculateRewards(a.purchaseAmount) },\n    rewardsUp: { fn: (a, b) => a.rewards - b.rewards },\n    rewardsDown: { fn: (a, b) => b.rewards - a.rewards }\n}\n","import React from 'react'\n\nfunction SortArrows (props) {\n  const { column, currentSort } = props\n\n  let changeIcon = ''\n\n  if (currentSort.indexOf(column) !== -1) {\n    switch (true) {\n      case /Down/.test(currentSort):\n        changeIcon = '▼'\n        break\n      case /Up/.test(currentSort):\n        changeIcon = '▲'\n        break\n      default:\n        changeIcon = ''\n        break\n    }\n  }\n\n  return (\n    <p style={{ float: 'right', margin: '.5px 3px 0px 0px', paddingLeft: '5px' }}>{changeIcon}</p>\n  )\n}\n\n\nexport default SortArrows","import React from 'react'\nimport { Table } from 'reactstrap'\nimport { tableSort } from '../utils'\nimport SortArrows from './SortArrows'\n\nclass RecordsTable extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            currentSort: 'customerDown'\n        }\n    }\n\n    sortCustomer = () => {\n        const { currentSort } = this.state\n        let nextSort\n\n        if (currentSort === 'customerDown') nextSort = 'customerUp'\n        else nextSort = 'customerDown'\n\n        this.setState({ currentSort: nextSort })\n    }\n\n    sortPurchases = () => {\n        const { currentSort } = this.state\n        let nextSort\n\n        if (currentSort === 'purchasesDown') nextSort = 'purchasesUp'\n        else nextSort = 'purchasesDown'\n\n        this.setState({ currentSort: nextSort })\n    }\n\n    sortPurchaseTotal = () => {\n        const { currentSort } = this.state\n        let nextSort\n\n        if (currentSort === 'purchaseTotalDown') nextSort = 'purchaseTotalUp'\n        else nextSort = 'purchaseTotalDown'\n\n        this.setState({ currentSort: nextSort })\n    }\n\n    sortRewards = () => {\n        const { currentSort } = this.state\n        let nextSort\n\n        if (currentSort === 'rewardsDown') nextSort = 'rewardsUp'\n        else nextSort = 'rewardsDown'\n\n        this.setState({ currentSort: nextSort })\n    }\n\n    render () {\n        const { data } = this.props\n        const { currentSort } = this.state\n\n        return (\n            <Table>\n                <thead>\n                    <tr>\n                        <th onClick={this.sortCustomer}>\n                            Customer\n                            <SortArrows column={'customer'} currentSort={currentSort} />\n                        </th>\n                        <th onClick={this.sortPurchases}>\n                            Purchases\n                            <SortArrows column={'purchases'} currentSort={currentSort} />\n                        </th>\n                        <th onClick={this.sortPurchaseTotal}>\n                            Purchase Total\n                            <SortArrows column={'purchaseTotal'} currentSort={currentSort} />\n                        </th>\n                        <th onClick={this.sortRewards}>\n                            Total Rewards\n                            <SortArrows column={'rewards'} currentSort={currentSort} />\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.sort(tableSort[currentSort].fn).map((row, i) => {\n                        return (\n                            <tr key={i}>\n                                <td>{row.customer}</td>\n                                <td>{row.purchases}</td>\n                                <td>${row.purchaseTotal}</td>\n                                <td>{row.rewards}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </Table>\n        )\n    }\n}\n\nexport default RecordsTable","import React from 'react'\nimport { Table } from 'reactstrap'\nimport { salesRecords } from '../data/SalesRecords'\nimport { calculateRewards } from '../components/RewardsCalculator'\nimport { tableSort } from '../utils'\nimport SortArrows from './SortArrows'\n\nclass HistoryTable extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            currentSort: 'dateDown'\n        }\n    }\n\n    sortDate = () => {\n        const { currentSort } = this.state\n        let nextSort\n\n        if (currentSort === 'dateDown') nextSort = 'dateUp'\n        else nextSort = 'dateDown'\n\n        this.setState({ currentSort: nextSort })\n    }\n\n    sortCustomer = () => {\n        const { currentSort } = this.state\n        let nextSort\n\n        if (currentSort === 'customerDown') nextSort = 'customerUp'\n        else nextSort = 'customerDown'\n\n        this.setState({ currentSort: nextSort })\n    }\n\n    sortPurchaseAmount = () => {\n        const { currentSort } = this.state\n        let nextSort\n\n        if (currentSort === 'purchaseAmountDown') nextSort = 'purchaseAmountUp'\n        else nextSort = 'purchaseAmountDown'\n\n        this.setState({ currentSort: nextSort })\n    }\n\n    sortReward = () => {\n        const { currentSort } = this.state\n        let nextSort\n\n        if (currentSort === 'rewardDown') nextSort = 'rewardUp'\n        else nextSort = 'rewardDown'\n\n        this.setState({ currentSort: nextSort })\n    }\n\n    render () {\n        const { currentSort } = this.state\n        return (\n            <Table>\n                <thead>\n                    <tr>\n                        <th onClick={this.sortDate}>\n                            Date\n                            <SortArrows column={'date'} currentSort={currentSort} />\n                        </th>\n                        <th onClick={this.sortCustomer}>\n                            Customer\n                            <SortArrows column={'customer'} currentSort={currentSort} />\n                        </th>\n                        <th onClick={this.sortPurchaseAmount}>\n                            Purchase Amt\n                            <SortArrows column={'purchaseAmount'} currentSort={currentSort} />\n                        </th>\n                        <th onClick={this.sortReward}>\n                            Reward\n                            <SortArrows column={'reward'} currentSort={currentSort} />\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {salesRecords.sort(tableSort[currentSort].fn).map((row, i) => {\n                        return (\n                            <tr key={i}>\n                                <td>{row.date}</td>\n                                <td>{row.customer}</td>\n                                <td>${row.purchaseAmount}</td>\n                                <td>{calculateRewards(row.purchaseAmount)}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </Table>\n        )\n    }\n}\n\nexport default HistoryTable","import React from 'react';\nimport './App.css';\n\nimport { calculateMonthlyRewards, calculateTotalRewards } from './components/RewardsCalculator'\nimport { salesRecords } from './data/SalesRecords'\nimport RecordsTable from './components/RecordsTable'\nimport HistoryTable from './components/HistoryTable'\n\nfunction App() {\n  return (\n    <div className='tablesContainer'>\n          <h1>Transaction History</h1>\n          <HistoryTable />\n          <h1>June Rewards</h1>\n          <RecordsTable data={calculateMonthlyRewards(6, salesRecords)} />\n          <h1>July Rewards</h1>\n          <RecordsTable data={calculateMonthlyRewards(7, salesRecords)} />\n          <h1>August Rewards</h1>\n          <RecordsTable data={calculateMonthlyRewards(8, salesRecords)} />\n          <h1>Total Rewards</h1>\n          <RecordsTable data={calculateTotalRewards(salesRecords)} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/RewardsCalculator.js","data/SalesRecords.js","components/RecordsTable.js","components/HistoryTable.js","App.js","serviceWorker.js","index.js"],"names":["calculateRewards","purchaseTotal","rewardPoints","calculateMonthlyRewards","numberMonth","customerData","monthlyTotals","monthlyArray","forEach","transaction","customerName","customer","date","purchases","rewards","name","purchaseAmount","Object","values","total","push","calculateTotalRewards","rewardsTotals","rewardsArray","salesRecords","RecordsTable","Table","style","width","this","props","data","map","row","i","key","React","Component","HistoryTable","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81da481a.chunk.js","sourcesContent":["export const calculateRewards = (purchaseTotal) => {\n    var rewardPoints = 0\n    if (purchaseTotal > 100) {\n        var doubleBonus = (purchaseTotal - 100) * 2\n        rewardPoints = doubleBonus + 50\n    }\n    else if (purchaseTotal > 50) {\n        rewardPoints = purchaseTotal - 50\n    }\n    return rewardPoints\n}\n\nexport const calculateMonthlyRewards = (numberMonth, customerData) => {\n    const monthlyTotals = {}\n    const monthlyArray = []\n    customerData.forEach(transaction => {\n        var customerName = transaction.customer\n        if (transaction.date[0] == numberMonth) {\n            if (!monthlyTotals[customerName]) {\n                monthlyTotals[customerName] = { purchases: 0, purchaseTotal: 0, rewards: 0 }\n            }\n            monthlyTotals[customerName] = {\n                name: customerName,\n                purchases: monthlyTotals[customerName].purchases + 1,\n                purchaseTotal: monthlyTotals[customerName].purchaseTotal + transaction.purchaseAmount,\n                rewards: monthlyTotals[customerName].rewards + calculateRewards(transaction.purchaseAmount)\n            }\n        }\n    })\n\n    Object.values(monthlyTotals).forEach(total => {\n        monthlyArray.push(total)\n    })\n\n    return monthlyArray\n}\n\nexport const calculateTotalRewards = (customerData) => {\n    const rewardsTotals = {}\n    const rewardsArray = []\n    customerData.forEach(transaction => {\n        var customerName = transaction.customer\n        if (!rewardsTotals[customerName]) {\n                rewardsTotals[customerName] = { purchases: 0, purchaseTotal: 0, rewards: 0 }\n            }\n            rewardsTotals[customerName] = {\n                name: customerName,\n                purchases: rewardsTotals[customerName].purchases + 1,\n                purchaseTotal: rewardsTotals[customerName].purchaseTotal + transaction.purchaseAmount,\n                rewards: rewardsTotals[customerName].rewards + calculateRewards(transaction.purchaseAmount)\n            }\n    })\n\n    Object.values(rewardsTotals).forEach(total => {\n        rewardsArray.push(total)\n    })\n\n    return rewardsArray\n}","export const salesRecords = [\n    { customer: 'J. Mellish', date: '7/12/2020', purchaseAmount: 120 },\n    { customer: 'J. Mellish', date: '6/18/2020', purchaseAmount: 76 },\n    { customer: 'J. Mellish', date: '8/05/2020', purchaseAmount: 190 },\n    { customer: 'J. Mellish', date: '7/28/2020', purchaseAmount: 55 },\n    { customer: 'J. Mellish', date: '7/22/2020', purchaseAmount: 24 },\n    { customer: 'L. Chaney', date: '7/14/2020', purchaseAmount: 93 },\n    { customer: 'L. Chaney', date: '7/15/2020', purchaseAmount: 40 },\n    { customer: 'L. Chaney', date: '8/26/2020', purchaseAmount: 247 },\n    { customer: 'S. Stamkos', date: '6/23/2020', purchaseAmount: 74 },\n    { customer: 'M. Karlsson', date: '6/12/2020', purchaseAmount: 45 },\n    { customer: 'M. Karlsson', date: '6/02/2020', purchaseAmount: 68 },\n    { customer: 'M. Karlsson', date: '8/21/2020', purchaseAmount: 101 },\n    { customer: 'L. Dubuc', date: '8/07/2020', purchaseAmount: 308 },\n    { customer: 'L. Dubuc', date: '6/01/2020', purchaseAmount: 14 },\n    { customer: 'L. Dubuc', date: '6/28/2020', purchaseAmount: 56 },\n    { customer: 'K. Civian', date: '8/17/2020', purchaseAmount: 106 },\n    { customer: 'K. Civian', date: '7/17/2020', purchaseAmount: 10 },\n    { customer: 'K. Civian', date: '6/17/2020', purchaseAmount: 62 },\n    { customer: 'H. Salvian', date: '7/19/2020', purchaseAmount: 212 },\n    { customer: 'H. Salvian', date: '7/07/2020', purchaseAmount: 142 },\n    { customer: 'D. Dean', date: '6/27/2020', purchaseAmount: 520 },\n    { customer: 'N. Novak', date: '8/02/2020', purchaseAmount: 90 },\n    { customer: 'N. Novak', date: '8/22/2020', purchaseAmount: 90 },\n    { customer: 'B. Fleischmann', date: '8/11/2020', purchaseAmount: 49 },\n]","import React from 'react'\nimport { Table } from 'reactstrap'\n\nclass RecordsTable extends React.Component {\n    render () {\n        return (\n            <Table>\n                <thead>\n                    <tr>\n                        <th style={{ width: '115px' }}>Customer</th>\n                        <th>Purchases</th>\n                        <th>Purchase Total</th>\n                        <th>Total Rewards</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.data.map((row, i) => {\n                        return (\n                            <tr key={i}>\n                                <td>{row.name}</td>\n                                <td>{row.purchases}</td>\n                                <td>${row.purchaseTotal}</td>\n                                <td>{row.rewards}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </Table>\n        )\n    }\n}\n\nexport default RecordsTable","import React from 'react'\nimport { Table } from 'reactstrap'\nimport { salesRecords } from '../data/SalesRecords'\nimport { calculateRewards } from '../components/RewardsCalculator'\n\nclass HistoryTable extends React.Component {\n    render () {\n        return (\n            <Table>\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Customer</th>\n                        <th>Purchase Amount</th>\n                        <th>Rewards Earned</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {salesRecords.map((row, i) => {\n                        return (\n                            <tr key={i}>\n                                <td>{row.date}</td>\n                                <td>{row.customer}</td>\n                                <td>${row.purchaseAmount}</td>\n                                <td>{calculateRewards(row.purchaseAmount)}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </Table>\n        )\n    }\n}\n\nexport default HistoryTable","import React from 'react';\nimport './App.css';\n\nimport { calculateMonthlyRewards, calculateTotalRewards } from './components/RewardsCalculator'\nimport { salesRecords } from './data/SalesRecords'\nimport RecordsTable from './components/RecordsTable'\nimport HistoryTable from './components/HistoryTable'\n\nfunction App() {\n  return (\n    <div>\n        <h1>Instructions</h1>\n        <p>A retailer offers a rewards program to its customers, awarding points based on each recorded purchase.</p>\n        <p>A customer receives 2 points for every dollar spent over $100 in each transaction, plus 1 point for every dollar spent over $50\n           in each transaction.</p>\n        <p>(e.g. a $120 purchase = 2x$20 + 1x$50 = 90 points)</p>\n        <p>Given a record of every transaction during a three month period, calculate the reward points earned for each customer per month and total.</p>\n        <h1>Transaction History</h1>\n        <HistoryTable />\n        <h1>June Rewards</h1>\n        <RecordsTable data={calculateMonthlyRewards(6, salesRecords)} />\n        <h1>July Rewards</h1>\n        <RecordsTable data={calculateMonthlyRewards(7, salesRecords)} />\n        <h1>August Rewards</h1>\n        <RecordsTable data={calculateMonthlyRewards(8, salesRecords)} />\n        <h1>Total Rewards</h1>\n        <RecordsTable data={calculateTotalRewards(salesRecords)} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}